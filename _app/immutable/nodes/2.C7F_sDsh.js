var ie=Object.defineProperty;var oe=(T,n,o)=>n in T?ie(T,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):T[n]=o;var h=(T,n,o)=>(oe(T,typeof n!="symbol"?n+"":n,o),o);import{f as G,t as W,l as ne,g as H}from"../chunks/disclose-version.Crw_ycLH.js";import{p as le,E as se,d as re}from"../chunks/runtime.CNnWIDwY.js";import{e as C}from"../chunks/events.DExX754S.js";import{p as g,b as ae}from"../chunks/props.DIwuu5N3.js";const ce=!0,be=Object.freeze(Object.defineProperty({__proto__:null,prerender:ce},Symbol.toStringTag,{value:"Module"})),he=""+new URL("../assets/tiles.CXP0i5T3.png",import.meta.url).href;class ue{constructor(){h(this,"canvas");h(this,"context");h(this,"mapData",new Uint16Array(1));h(this,"mapWidth",120);h(this,"mapHeight",100);h(this,"tileWidth",1);h(this,"tileHeight",1);h(this,"panX",0);h(this,"panY",0);h(this,"screenWidth",0);h(this,"screenHeight",0);h(this,"screenAnchorX",.5);h(this,"screenAnchorY",.5);h(this,"zoom",1);h(this,"tileTextureURL",null)}initialize(n,o,c,i,r,s,u,d){return this.canvas=n,this.context=o,this.mapData=c,this.mapWidth=i,this.mapHeight=r,this.tileWidth=s,this.tileHeight=u,this.tileTextureURL=d,Promise.resolve()}screenToTile(n){const[o,c]=n,i=o-this.screenWidth*this.screenAnchorX,r=c-this.screenHeight*this.screenAnchorY,s=i/this.zoom,u=r/this.zoom,d=s/this.tileWidth,E=u/this.tileHeight,x=d+this.panX,z=E+this.panY;return[x,z]}screenToTileDelta(n){const[o,c]=n,i=o/this.zoom/this.tileWidth,r=c/this.zoom/this.tileHeight;return[i,r]}tileToScreen(n){const[o,c]=n,i=o-this.panX,r=c-this.panY,s=i*this.zoom,u=r*this.zoom,d=s*this.tileWidth+this.screenWidth*this.screenAnchorX,E=u*this.tileHeight+this.screenHeight*this.screenAnchorY;return[d,E]}tileToScreenDelta(n){const[o,c]=n,i=o*this.zoom*this.tileWidth,r=c*this.zoom*this.tileHeight;return[i,r]}setScreenSize(n,o){this.screenWidth=n,this.screenHeight=o}panTo(n,o){this.panX=n,this.panY=o}panBy(n,o){this.panX+=n,this.panY+=o}zoomTo(n){this.zoom=n}zoomBy(n){this.zoom*=n}}class de extends ue{constructor(){super();h(this,"tilesTexture",null);h(this,"mapTexture",null);h(this,"tilesWidth",0);h(this,"tilesHeight",0);h(this,"tileProgramInfo",null);h(this,"tileBufferInfo",null);h(this,"screenTileArray",new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]))}initialize(o,c,i,r,s,u,d,E){return super.initialize(o,c,i,r,s,u,d,E).then(()=>(this.context=c,this.zoom=1,this.context.getExtension("EXT_texture_norm16")?(this.tileProgramInfo=this.createShaderProgram(),this.tileBufferInfo=this.createBuffers(),this.mapTexture=this.createMapTexture(i,r,s),this.loadTexture(E)):(console.error("R32UI format is not supported on this device."),null))).then(()=>{}).catch(x=>{throw x})}createMapTexture(o,c,i){if(!this.context)return console.error("GL context is not initialized."),null;const r=this.context.createTexture();return this.context.bindTexture(this.context.TEXTURE_2D,r),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.R16UI,this.mapHeight,this.mapWidth,0,this.context.RED_INTEGER,this.context.UNSIGNED_SHORT,o),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.NEAREST),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MAG_FILTER,this.context.NEAREST),r}updateMapData(o){if(!this.context||!this.mapTexture)throw new Error("The WebGL context or map texture is not initialized.");this.context.bindTexture(this.context.TEXTURE_2D,this.mapTexture),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.R16UI,this.mapHeight,this.mapWidth,0,this.context.RED_INTEGER,this.context.UNSIGNED_SHORT,o)}loadTexture(o){return new Promise((c,i)=>{if(!this.context){i(new Error("GL context is not initialized."));return}const r=this.context.createTexture();this.tilesTexture=r,this.context.bindTexture(this.context.TEXTURE_2D,r),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA,1,1,0,this.context.RGBA,this.context.UNSIGNED_BYTE,new Uint8Array([0,0,0,255]));const s=new Image;s.onload=()=>{if(!this.context){i(new Error("GL context is not initialized."));return}this.tilesWidth=s.width,this.tilesHeight=s.height,this.context.bindTexture(this.context.TEXTURE_2D,r),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA,this.context.RGBA,this.context.UNSIGNED_BYTE,s),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.NEAREST),c()},s.onerror=()=>{i(new Error(`Failed to load texture at ${o}`))},s.src=o})}createShaderProgram(){if(!this.context)throw new Error("The WebGL context is not initialized.");const i=this.compileShaders(`#version 300 es
            precision mediump float;
            in vec3 a_position;
            in vec2 a_screenTile;
            out vec2 v_screenTile;

            void main() {
                gl_Position = vec4(a_position, 1.0);
                v_screenTile = a_screenTile;
            }
        `,`#version 300 es
            precision mediump float;
            precision highp usampler2D;
            uniform vec2 u_tileSize;
            uniform vec2 u_tilesSize;
            uniform sampler2D u_tiles;
            uniform vec2 u_mapSize;
            uniform usampler2D u_map;
            in vec2 v_screenTile;
            out vec4 fragColor;

            const vec4 color_brown = vec4(0.8, 0.5, 0.4, 1.0);
            
            void main() {

                // Step 1: Calculate the screen tile coordinate.
                vec2 screenTileColRow = floor(v_screenTile);
                vec2 screenTilePosition = fract(v_screenTile);
            
                // Check if the screen tile coordinate is out of the map bounds.
                // u_mapSize is the map size in tiles in column-major order so x is rows and y is columns
                if (screenTileColRow.x <  0.0         || screenTileColRow.y <  0.0 || 
                    screenTileColRow.x >= u_mapSize.y || screenTileColRow.y >= u_mapSize.x) {
                    fragColor = color_brown;
                    return;
                }

                // Step 2: Calculate cell column and row
                vec2 cellColRow = screenTileColRow;
                vec2 cellRowCol = vec2(cellColRow.y, cellColRow.x);
                vec2 cellUV = cellRowCol / u_mapSize;

                // XXX: Mystery fudge factor to prevent sampling from adjacent cells every 6 rows!
                cellUV.x = cellUV.x * 1.00001;

                // Step 3: Extract data from the 16-bit unsigned integer texture
                int tilesPerRow = int(u_tilesSize.x / u_tileSize.x);
                int tilesPerCol = int(u_tilesSize.y / u_tileSize.y);
                int tileCount = tilesPerRow * tilesPerCol;
                int cellValue = int(texture(u_map, cellUV).r);
                int tileValue = int(mod(float(cellValue & 0x03ff), float(tileCount)));
                        
                // Step 4: Calculate tile row and column from cell value
                int tileRow = int(floor(float(tileValue) / float(tilesPerRow)));
                int tileCol = int(mod(float(tileValue), float(tilesPerRow)));
                    
                // Step 5: Calculate which pixel of the tile to sample
                vec2 tileCorner = vec2(tileCol, tileRow) * u_tileSize;
                vec2 tilePixel = tileCorner + (screenTilePosition * u_tileSize);
                vec2 uv = tilePixel / u_tilesSize;
                    
                // Step 6: Sample the tile
                fragColor = texture(u_tiles, uv);
            }
        `);if(!i)throw new Error("Unable to create shader program");const r={position:this.context.getAttribLocation(i,"a_position"),screenTile:this.context.getAttribLocation(i,"a_screenTile")},s={tileSize:this.context.getUniformLocation(i,"u_tileSize"),tilesSize:this.context.getUniformLocation(i,"u_tilesSize"),tiles:this.context.getUniformLocation(i,"u_tiles"),mapSize:this.context.getUniformLocation(i,"u_mapSize"),map:this.context.getUniformLocation(i,"u_map")};for(const[u,d]of Object.entries(r))if(d===-1)throw new Error(`Shader attribute location not found: ${u}`);for(const[u,d]of Object.entries(s))if(d===null)throw new Error(`Shader uniform location not found: ${u}`);return{program:i,attributeLocations:r,uniformLocations:s}}compileShaders(o,c){if(!this.context)throw new Error("The WebGL context is not initialized.");const i=this.loadShader(this.context.VERTEX_SHADER,o),r=this.loadShader(this.context.FRAGMENT_SHADER,c),s=this.context.createProgram();if(!s)throw new Error("Unable to create shader program");if(this.context.attachShader(s,i),this.context.attachShader(s,r),this.context.linkProgram(s),!this.context.getProgramParameter(s,this.context.LINK_STATUS)){const u=this.context.getProgramInfoLog(s);throw this.context.deleteProgram(s),new Error("Failed to link shader program: "+u)}return s}loadShader(o,c){if(!this.context)throw new Error("The WebGL context is not initialized.");const i=this.context.createShader(o);if(!i)throw new Error("Unable to create shader.");if(this.context.shaderSource(i,c),this.context.compileShader(i),!this.context.getShaderParameter(i,this.context.COMPILE_STATUS)){const r=this.context.getShaderInfoLog(i);throw this.context.deleteShader(i),new Error("An error occurred compiling the shaders: "+r)}return i}createBuffers(){if(!this.context)throw new Error("The WebGL context is not initialized.");const o=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,o);const c=[-1,1,0,1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0];this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(c),this.context.STATIC_DRAW);const i=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,i),this.context.bufferData(this.context.ARRAY_BUFFER,this.screenTileArray,this.context.DYNAMIC_DRAW);const r=this.context.createBuffer();this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,r);const s=[0,1,2,3,4,5];return this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(s),this.context.STATIC_DRAW),{position:o,screenTile:i,indices:r}}updateScreenTileArray(){if(!this.context||!this.tileBufferInfo)throw new Error("The WebGL context is not initialized.");var o=this.panX*this.tileWidth,c=this.panY*this.tileHeight,i=4*this.zoom,r=(o-this.screenWidth/i)/this.tileWidth,s=(o+this.screenWidth/i)/this.tileWidth,u=(c-this.screenHeight/i)/this.tileHeight,d=(c+this.screenHeight/i)/this.tileHeight;this.screenTileArray.set([r,u,s,u,r,d,s,u,r,d,s,d]),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.tileBufferInfo.screenTile),this.context.bufferSubData(this.context.ARRAY_BUFFER,0,this.screenTileArray)}render(){if(!this.canvas||!this.context||!this.tileProgramInfo||!this.tileBufferInfo||!this.tilesTexture||!this.mapTexture)throw new Error("The canvas, WebGL context, shaders, or textures are not properly initialized.");this.setScreenSize(this.canvas.width,this.canvas.height),this.context.viewport(0,0,this.context.drawingBufferWidth,this.context.drawingBufferHeight),this.context.clearColor(0,0,0,1),this.context.clear(this.context.COLOR_BUFFER_BIT|this.context.DEPTH_BUFFER_BIT),this.context.useProgram(this.tileProgramInfo.program),this.context.uniform2f(this.tileProgramInfo.uniformLocations.tileSize,this.tileWidth,this.tileHeight),this.context.uniform2f(this.tileProgramInfo.uniformLocations.tilesSize,this.tilesWidth,this.tilesHeight),this.context.activeTexture(this.context.TEXTURE0),this.context.bindTexture(this.context.TEXTURE_2D,this.tilesTexture),this.context.uniform1i(this.tileProgramInfo.uniformLocations.tiles,0),this.context.activeTexture(this.context.TEXTURE1),this.context.bindTexture(this.context.TEXTURE_2D,this.mapTexture),this.context.texSubImage2D(this.context.TEXTURE_2D,0,0,0,this.mapHeight,this.mapWidth,this.context.RED_INTEGER,this.context.UNSIGNED_SHORT,this.mapData),this.context.uniform1i(this.tileProgramInfo.uniformLocations.map,1),this.context.uniform2f(this.tileProgramInfo.uniformLocations.mapSize,this.mapHeight,this.mapWidth),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.tileBufferInfo.position),this.context.vertexAttribPointer(this.tileProgramInfo.attributeLocations.position,3,this.context.FLOAT,!1,0,0),this.context.enableVertexAttribArray(this.tileProgramInfo.attributeLocations.position),this.updateScreenTileArray(),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.tileBufferInfo.screenTile),this.context.vertexAttribPointer(this.tileProgramInfo.attributeLocations.screenTile,2,this.context.FLOAT,!1,0,0),this.context.enableVertexAttribArray(this.tileProgramInfo.attributeLocations.screenTile),this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.tileBufferInfo.indices),this.context.drawElements(this.context.TRIANGLES,6,this.context.UNSIGNED_SHORT,0)}}var me=W('<div class="fullscreen svelte-1pp8o3e"><canvas class="svelte-1pp8o3e"></canvas></div>');function pe(T,n){le(n,!0);class o{autoGoto(e,l,t,m,f){console.log("MicropolisCallback: autoGoto:","x:",t,"y:",m,"message:",f)}didGenerateMap(e,l,t){console.log("MicropolisCallback: didGenerateMap:","seed:",t)}didLoadCity(e,l,t){console.log("MicropolisCallback: didLoadCity:","filename:",t)}didLoadScenario(e,l,t,m){console.log("MicropolisCallback: didLoadScenario:","name:",t,"fname:",m)}didLoseGame(e,l){console.log("MicropolisCallback: didLoseGame")}didSaveCity(e,l,t){console.log("MicropolisCallback: didSaveCity:","filename:",t)}didTool(e,l,t,m,f){console.log("MicropolisCallback: didTool:","name:",t,"x:",m,"y:",f)}didWinGame(e,l){console.log("MicropolisCallback: didWinGame")}didntLoadCity(e,l,t){console.log("MicropolisCallback: didntLoadCity:","filename:",t)}didntSaveCity(e,l,t){console.log("MicropolisCallback: didntSaveCity:","filename:",t)}makeSound(e,l,t,m,f,v){console.log("MicropolisCallback: makeSound:","channel:",t,"sound:",m,"x:",f,"y:",v)}newGame(e,l){console.log("MicropolisCallback: newGame")}saveCityAs(e,l,t){console.log("MicropolisCallback: saveCityAs:","filename:",t)}sendMessage(e,l,t,m,f,v,I){console.log("MicropolisCallback: sendMessage:","messageIndex:",t,"x:",m,"y:",f,"picture:",v,"important:",I)}showBudgetAndWait(e,l){console.log("MicropolisCallback: showBudgetAndWait")}showZoneStatus(e,l,t,m,f,v,I,$,ee,te){console.log("MicropolisCallback: showZoneStatus:","tileCategoryIndex:",t,"populationDensityIndex:",m,"landValueIndex:",f,"crimeRateIndex:",v,"pollutionIndex:",I,"growthRateIndex:",$,"x:",ee,"y:",te)}simulateRobots(e,l){}simulateChurch(e,l,t,m,f){}startEarthquake(e,l,t){console.log("MicropolisCallback: startEarthquake:","strength:",t)}startGame(e,l){console.log("MicropolisCallback: startGame")}startScenario(e,l,t){console.log("MicropolisCallback: startScenario:","scenario:",t)}updateBudget(e,l){console.log("MicropolisCallback: updateBudget")}updateCityName(e,l,t){console.log("MicropolisCallback: updateCityName:","cityName:",t)}updateDate(e,l,t,m){console.log("MicropolisCallback: updateDate:","cityYear:",t,"cityMonth:",m)}updateDemand(e,l,t,m,f){console.log("MicropolisCallback: updateDemand:","r:",t,"c:",m,"i:",f)}updateEvaluation(e,l){console.log("MicropolisCallback: updateEvaluation")}updateFunds(e,l,t){console.log("MicropolisCallback: updateFunds:","totalFunds:",t)}updateGameLevel(e,l,t){console.log("MicropolisCallback: updateGameLevel:","gameLevel:",t)}updateHistory(e,l){console.log("MicropolisCallback: updateHistory")}updateMap(e,l){console.log("MicropolisCallback: updateMap")}updateOptions(e,l){console.log("MicropolisCallback: updateOptions")}updatePasses(e,l,t){console.log("MicropolisCallback: updatePasses:","passes:",t)}updatePaused(e,l,t){console.log("MicropolisCallback: updatePaused:","simPaused:",t)}updateSpeed(e,l,t){console.log("MicropolisCallback: updateSpeed:","speed:",t)}updateTaxRate(e,l,t){console.log("MicropolisCallback: updateTaxRate:","cityTax:",t)}}let c=g(n,"tileWidth",3,16),i=g(n,"tileHeight",3,16);g(n,"tileCount",3,960),g(n,"tileTextureWidth",3,256),g(n,"tileTextureHeight",3,960);let r=g(n,"tileTexture",3,he),s=g(n,"mapWidth",3,120),u=g(n,"mapHeight",3,100);g(n,"mapLength",11,()=>s()*u());let d=g(n,"framesPerSecond",3,30),E=g(n,"zoomScale",3,.025),x=null,z="/cities/haight.cty",k=null,A=0,U=0,p=null,b=null,R=null,_=[],D=null,M=!1,S=[0,0],y=[0,0];function F(){window.micropolis=x=new micropolisengine.Micropolis;const a=new o,e=new micropolisengine.JSCallback(a);x.setCallback(e,null),x.init(),x.loadCity(z),A=x.getMapAddress()/2,U=A+x.getMapSize()/2,k=micropolisengine.HEAPU16.slice(A,U)}function Y(){console.log("tick"),N(),L()}async function N(){x.simTick(),x.animateTiles()}function L(){for(let a of _)!a||!a.canvas||(k=micropolisengine.HEAPU16.slice(A,U),R.mapData=k,a.render())}function B(){if(p){const a=window.devicePixelRatio||1;p.width=p.clientWidth*a,p.height=p.clientHeight*a,b&&b.viewport(0,0,p.width,p.height)}}function O(a){if(!a)return null;for(let e of _)if(e.canvas==a)return e;return null}function P(a){let e=O(a.target);return e==null?(console.log("MicropolisView: trackMouse: no TileRenderer for event target:",a.target),null):(y=S,S=[a.offsetX,a.offsetY],e.screenToTile(S),e)}function j(a,e){for(let l of _)l.panBy(a,e)}function q(a){for(let e of _)e.zoomBy(a)}function Z(a){let e=P(a);e&&(M=!0,e.panX,e.panY)}function J(a){if(!M)return;let e=P(a);if(!e)return;const l=[y[0]-S[0],y[1]-S[1]];let t=e.screenToTileDelta(l);j(t[0],t[1]),L()}function K(a){!M||!P(a)||(M=!1,L())}function Q(a){if(!P(a))return;const t=1+(a.deltaY>0?-E():E());q(t),L()}function X(a){if(a<=0){D!==null&&(clearInterval(D),D=null);return}D=setInterval(Y,1e3/d())}se(()=>{if(F(),p==null){console.log("MicropolisView: $effect: canvasGL is null!");return}if(b=p.getContext("webgl2"),b==null){console.log("MicropolisView: $effect: no ctxGL!");return}if(R=new de,R==null){console.log("MicropolisView: $effect: no webGLTileRenderer!");return}return B(),R.initialize(p,b,k,s(),u(),c(),i(),r()).then(()=>{if(p==null){console.log("MicropolisView: $effect: initialize: then: no canvasGL!");return}if(b==null){console.log("MicropolisView: $effect: initialize: then: no ctxGL!");return}if(R==null){console.log("MicropolisView: $effect: initialize: then: no webGLTileRenderer!");return}R.panTo(s()*.5,u()*.5),R.zoomTo(.5),_.push(R),R.render()}),X(d()),()=>{X(0)}});var V=me();C("resize",ne,B,!1);var w=H(V);ae(w,a=>p=a,()=>p),C("mousedown",w,Z,!1),C("mousemove",w,J,!1),C("mouseup",w,K,!1),C("wheel",w,Q,!1,!0),G(T,V),re()}var xe=W('<div class="fullscreen svelte-ge4q34"><!></div>');function _e(T){var n=xe(),o=H(n);pe(o,{width:"100%",height:"100%"}),G(T,n)}export{_e as component,be as universal};
