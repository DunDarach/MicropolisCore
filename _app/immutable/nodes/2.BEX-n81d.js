var me=Object.defineProperty;var de=(x,i,e)=>i in x?me(x,i,{enumerable:!0,configurable:!0,writable:!0,value:e}):x[i]=e;var c=(x,i,e)=>(de(x,typeof i!="symbol"?i+"":i,e),e);import{l as ge,p as T,u as pe,n as ie,r as _e,q as ne,f as N,a as oe,e as I,j as G,g as O,b as k,i as Re,h as Ee,$ as we}from"../chunks/disclose-version.HKkrRV_c.js";import{p as re,a as se}from"../chunks/runtime.DsRB8KFS.js";const ve=!0,be=Object.freeze(Object.defineProperty({__proto__:null,prerender:ve},Symbol.toStringTag,{value:"Module"})),Se=""+new URL("../assets/tiles.CXP0i5T3.png",import.meta.url).href;class le{constructor(){c(this,"canvas");c(this,"context");c(this,"mapData",new Uint16Array(1));c(this,"mapWidth",1);c(this,"mapHeight",1);c(this,"tileWidth",1);c(this,"tileHeight",1);c(this,"panX",0);c(this,"panY",0);c(this,"screenWidth",0);c(this,"screenHeight",0);c(this,"screenAnchorX",.5);c(this,"screenAnchorY",.5);c(this,"zoom",1);c(this,"tileTextureURL",null)}initialize(i,e,o,t,r,s,h,l){return this.canvas=i,this.context=e,this.mapData=o,this.mapWidth=t,this.mapHeight=r,this.tileWidth=s,this.tileHeight=h,this.tileTextureURL=l,Promise.resolve()}screenToTile(i){const[e,o]=i,t=e-this.screenWidth*this.screenAnchorX,r=o-this.screenHeight*this.screenAnchorY,s=t/this.zoom,h=r/this.zoom,l=s/this.tileWidth,u=h/this.tileHeight,d=l-this.panX,m=u-this.panY;return[d,m]}screenToTileDelta(i){const[e,o]=i,t=e/this.zoom/this.tileWidth,r=o/this.zoom/this.tileHeight;return[t,r]}tileToScreen(i){const[e,o]=i,t=e-this.panX,r=o-this.panY,s=t*this.zoom,h=r*this.zoom,l=s*this.tileWidth+this.screenWidth*this.screenAnchorX,u=h*this.tileHeight+this.screenHeight*this.screenAnchorY;return[l,u]}tileToScreenDelta(i){const[e,o]=i,t=e*this.zoom*this.tileWidth,r=o*this.zoom*this.tileHeight;return[t,r]}setScreenSize(i,e){this.screenWidth=i,this.screenHeight=e}panTo(i,e){this.panX=i,this.panY=e}panBy(i,e){this.panX+=i,this.panY+=e}zoomTo(i){this.zoom=i}zoomBy(i){this.zoom*=i}}class Pe extends le{constructor(){super();c(this,"tileImage",null)}initialize(e,o,t,r,s,h,l,u){return super.initialize(e,o,t,r,s,h,l,u).then(()=>(this.context=o,this.tileImage=new Image,this.tileImage.src=u,new Promise((d,m)=>{if(!this.context||!this.tileImage)throw new Error("Canvas context or tile image is not properly initialized.");this.tileImage.onload=()=>d(),this.tileImage.onerror=()=>m(new Error(`Failed to load image at ${u}`))})))}render(){if(!this.canvas||!this.context||!this.tileImage)throw new Error("The canvas, 2d context, or tile image are not properly initialized.");const e=this.canvas.width,o=this.canvas.height,t=e*this.screenAnchorX,r=o*this.screenAnchorY,s=this.tileWidth*this.zoom,h=this.tileHeight*this.zoom,l=this.screenToTile([0,0]),u=this.screenToTile([e,o]);let d=Math.max(0,Math.min(Math.floor(l[0]),this.mapWidth)),m=Math.max(0,Math.min(Math.floor(l[1]),this.mapHeight)),z=Math.max(0,Math.min(Math.ceil(u[0]),this.mapWidth)),A=Math.max(0,Math.min(Math.ceil(u[1]),this.mapHeight));d=0,m=0,z=this.mapWidth,A=this.mapHeight,this.setScreenSize(e,o),this.context.fillStyle="#000000",this.context.fillRect(0,0,e,o),console.log("CanvasTileRenderer:",this,"render:","screenWidth:",e,"screenHeight:",o,"anchorX:",t,"anchorY:",r,"screenTileWidth:",s,"screenTileHeight:",h,"upperLeft:",l,"lowerRight:",u,"left:",d,"top:",m,"right:",z,"bottom:",A);for(let S=m;S<=A;S++)for(let P=d;P<=z;P++){const g=this.mapData[S*this.mapWidth+P],_=this.tileToScreen([P,S]),f=this.tileImage.width/this.tileWidth,p=g%f*this.tileWidth,E=Math.floor(g/f)*this.tileHeight;this.context.drawImage(this.tileImage,p,E,this.tileWidth,this.tileHeight,_[0],_[1],s,h)}}}class De extends le{constructor(){super();c(this,"tilesTexture",null);c(this,"mapTexture",null);c(this,"tilesWidth",0);c(this,"tilesHeight",0);c(this,"tileProgramInfo",null);c(this,"tileBufferInfo",null);c(this,"screenTileArray",new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]))}initialize(e,o,t,r,s,h,l,u){return super.initialize(e,o,t,r,s,h,l,u).then(()=>(this.context=o,this.context.getExtension("EXT_texture_norm16")?(this.tileProgramInfo=this.createShaderProgram(),this.tileBufferInfo=this.createBuffers(),this.mapTexture=this.createMapTexture(t,r,s),this.loadTexture(u)):(console.error("R32UI format is not supported on this device."),null))).then(()=>{}).catch(d=>{throw d})}createMapTexture(e,o,t){if(!this.context)return console.error("GL context is not initialized."),null;const r=this.context.createTexture();return this.context.bindTexture(this.context.TEXTURE_2D,r),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.R16UI,o,t,0,this.context.RED_INTEGER,this.context.UNSIGNED_SHORT,e),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.NEAREST),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MAG_FILTER,this.context.NEAREST),r}loadTexture(e){return new Promise((o,t)=>{if(!this.context){t(new Error("GL context is not initialized."));return}const r=this.context.createTexture();this.tilesTexture=r,this.context.bindTexture(this.context.TEXTURE_2D,r),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA,1,1,0,this.context.RGBA,this.context.UNSIGNED_BYTE,new Uint8Array([0,0,0,255]));const s=new Image;s.onload=()=>{if(!this.context){t(new Error("GL context is not initialized."));return}this.tilesWidth=s.width,this.tilesHeight=s.height,this.context.bindTexture(this.context.TEXTURE_2D,r),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA,this.context.RGBA,this.context.UNSIGNED_BYTE,s),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.LINEAR),o()},s.onerror=()=>{t(new Error(`Failed to load texture at ${e}`))},s.src=e})}createShaderProgram(){if(!this.context)throw new Error("The WebGL context is not initialized.");const t=this.compileShaders(`#version 300 es
precision mediump float;
in vec3 a_position;
in vec2 a_screenTile;
out vec2 v_screenTile;

void main() {

    gl_Position = vec4(a_position, 1.0);
    v_screenTile = a_screenTile;

}
`,`#version 300 es
precision mediump float;
precision highp usampler2D;
uniform vec2 u_tileSize; // 16 16
uniform vec2 u_tilesSize; // 256 960
uniform sampler2D u_tiles;
uniform vec2 u_mapSize; // 256 256
uniform usampler2D u_map;
in vec2 v_screenTile;
out vec4 fragColor;

void main() {

    // Calculate the screen tile coordinate.
    vec2 screenTileColRow = floor(v_screenTile);
    vec2 screenTilePosition = v_screenTile - screenTileColRow;

    vec2 cellColRow = mod(screenTileColRow, u_mapSize);
    vec2 cellUV = cellColRow / u_mapSize;

    // Extract data from the 16-bit unsigned integer texture
    float cellValue = float(texture(u_map, cellUV).r); // Directly use the red channel as the cell value

    // Calculate the tile row and column from the cell value.
    float tilesPerRow = u_tilesSize.x / u_tileSize.x;
    float tilesPerCol = u_tilesSize.y / u_tileSize.y;

    // Wrap the cell value by the number of tiles there are.
    cellValue = mod(cellValue, tilesPerRow * tilesPerCol);

    float tileRow = floor(cellValue / tilesPerRow);
    float tileCol = mod(cellValue, tilesPerRow);

    // Calculate which pixel of the tile to sample.
    vec2 tileCorner = vec2(tileCol, tileRow) * u_tileSize;
    vec2 tilePixel = tileCorner + (screenTilePosition * u_tileSize);
    vec2 uv = tilePixel / u_tilesSize;

    // Sample the tile.
    fragColor = texture(u_tiles, uv);

}
`);if(!t)throw new Error("Unable to create shader program");const r={position:this.context.getAttribLocation(t,"a_position"),screenTile:this.context.getAttribLocation(t,"a_screenTile")},s={tileSize:this.context.getUniformLocation(t,"u_tileSize"),tilesSize:this.context.getUniformLocation(t,"u_tilesSize"),tiles:this.context.getUniformLocation(t,"u_tiles"),mapSize:this.context.getUniformLocation(t,"u_mapSize"),map:this.context.getUniformLocation(t,"u_map")};for(const[h,l]of Object.entries(r))if(l===-1)throw new Error(`Shader attribute location not found: ${h}`);for(const[h,l]of Object.entries(s))if(l===null)throw new Error(`Shader uniform location not found: ${h}`);return{program:t,attributeLocations:r,uniformLocations:s}}compileShaders(e,o){if(!this.context)throw new Error("The WebGL context is not initialized.");const t=this.loadShader(this.context.VERTEX_SHADER,e),r=this.loadShader(this.context.FRAGMENT_SHADER,o),s=this.context.createProgram();if(!s)throw new Error("Unable to create shader program");if(this.context.attachShader(s,t),this.context.attachShader(s,r),this.context.linkProgram(s),!this.context.getProgramParameter(s,this.context.LINK_STATUS)){const h=this.context.getProgramInfoLog(s);throw this.context.deleteProgram(s),new Error("Failed to link shader program: "+h)}return s}loadShader(e,o){if(!this.context)throw new Error("The WebGL context is not initialized.");const t=this.context.createShader(e);if(!t)throw new Error("Unable to create shader.");if(this.context.shaderSource(t,o),this.context.compileShader(t),!this.context.getShaderParameter(t,this.context.COMPILE_STATUS)){const r=this.context.getShaderInfoLog(t);throw this.context.deleteShader(t),new Error("An error occurred compiling the shaders: "+r)}return t}createBuffers(){if(!this.context)throw new Error("The WebGL context is not initialized.");const e=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,e);const o=[-1,-1,0,1,-1,0,-1,1,0,-1,1,0,1,-1,0,1,1,0];this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(o),this.context.STATIC_DRAW);const t=this.context.createBuffer(),r=this.context.createBuffer();this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,r);const s=[0,1,2,2,1,3];return this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(s),this.context.STATIC_DRAW),{position:e,screenTile:t,indices:r}}updateScreenTileArray(){if(!this.context||!this.tileBufferInfo)throw new Error("The WebGL context is not initialized.");const e=this.panX,o=this.panX+this.screenWidth/this.zoom,t=this.panY,r=this.panY+this.screenHeight/this.zoom;this.screenTileArray.set([e,r,o,r,e,t,e,t,o,r,o,t]),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.tileBufferInfo.screenTile),this.context.bufferData(this.context.ARRAY_BUFFER,this.screenTileArray,this.context.DYNAMIC_DRAW)}render(){if(!this.canvas||!this.context||!this.tileProgramInfo||!this.tileBufferInfo||!this.tilesTexture)throw new Error("The canvas, WebGL context, shaders, or textures are not properly initialized.");this.setScreenSize(this.canvas.width,this.canvas.height),this.context.viewport(0,0,this.context.drawingBufferWidth,this.context.drawingBufferHeight),this.context.clearColor(0,0,0,1),this.context.clearDepth(1),this.context.enable(this.context.DEPTH_TEST),this.context.depthFunc(this.context.LEQUAL),this.context.clear(this.context.COLOR_BUFFER_BIT|this.context.DEPTH_BUFFER_BIT),this.context.useProgram(this.tileProgramInfo.program),this.context.uniform2f(this.tileProgramInfo.uniformLocations.tileSize,this.tileWidth,this.tileHeight),this.context.uniform2f(this.tileProgramInfo.uniformLocations.tilesSize,this.tilesWidth,this.tilesHeight),this.context.activeTexture(this.context.TEXTURE0),this.context.bindTexture(this.context.TEXTURE_2D,this.tilesTexture),this.context.uniform1i(this.tileProgramInfo.uniformLocations.tiles,0),this.context.activeTexture(this.context.TEXTURE1),this.context.bindTexture(this.context.TEXTURE_2D,this.mapTexture),this.context.uniform1i(this.tileProgramInfo.uniformLocations.map,1),this.context.uniform2f(this.tileProgramInfo.uniformLocations.mapSize,this.mapWidth,this.mapHeight),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.tileBufferInfo.position),this.context.vertexAttribPointer(this.tileProgramInfo.attributeLocations.position,3,this.context.FLOAT,!1,0,0),this.context.enableVertexAttribArray(this.tileProgramInfo.attributeLocations.position),this.updateScreenTileArray(),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.tileBufferInfo.screenTile),this.context.vertexAttribPointer(this.tileProgramInfo.attributeLocations.screenTile,2,this.context.FLOAT,!1,0,0),this.context.enableVertexAttribArray(this.tileProgramInfo.attributeLocations.screenTile),this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.tileBufferInfo.indices),this.context.viewport(0,0,this.context.canvas.width,this.context.canvas.height),this.context.drawElements(this.context.TRIANGLES,6,this.context.UNSIGNED_SHORT,0)}}var ze=k('<div><canvas class="svelte-mnct6x"></canvas> <br> <canvas class="svelte-mnct6x"></canvas></div>');function Ae(x,i){se(i,!0);let e=T(i,"tileWidth",3,16),o=T(i,"tileHeight",3,16),t=T(i,"tileCount",3,960),r=T(i,"tileTextureWidth",3,256),s=T(i,"tileTextureHeight",3,960),h=T(i,"tileTexture",3,Se),l=T(i,"mapWidth",3,1),u=T(i,"mapHeight",3,1),d=T(i,"mapLength",11,()=>l()*u()),m=T(i,"mapData",11,()=>new Uint16Array(Array.from({length:d()},()=>Math.floor(Math.random()*t())))),z=T(i,"canvasWidth",3,512),A=T(i,"canvasHeight",3,512),S=T(i,"framesPerSecond",3,1),P=T(i,"zoomScale",3,.025),g=null,_=null,f=null,p=null,E=null,R=null,L=[],X=null,b=!1,w=[0,0],B=[0,0],H=[0,0],j=[0,0],q=[0,0],ce=[0,0],K=[0,0];function ae(){for(let n=0,a=m().length;n<a;n++)m()[n]=n%t()}function Y(){for(let n of L)!n||!n.canvas||n.render()}function he(){ae(),Y()}function ue(n){if(!n)return null;for(let a of L)if(a.canvas==n)return a;return null}function V(n){let a=ue(n.target);return a==null?(console.log("TileView: trackMouse: no TileRenderer for event target:",n.target),null):(H=w,j=B,w=[n.offsetX,n.offsetY],B=a.screenToTile(w),console.log("TileRenderer: trackMouse: event:",n,"screenPosLast:",H,"screenPos:",w,"tilePos:",B,"tilePosLast:",j,"tileRenderer:",a),a)}function fe(n,a){console.log("TileRenderer: panBy:",n,a);for(let U of L)U.panBy(n,a)}function xe(n){for(let a of L)a.zoomBy(n)}function Q(n){let a=V(n);a&&(b=!0,q=w,K=[a.panX,a.panY],console.log("TileView: onmousedown: event:",n,"target:",n.target,"screenPos:",w,"panDown:",K))}function J(n){if(!b)return;let a=V(n);if(!a)return;const U=[H[0]-w[0],H[1]-w[1]];let W=a.screenToTileDelta(U);console.log("TileView: onmousemove: event:",n,"target:",n.target,"screenDelta:",U,"tileDelta:",W,"tilePos:",B,"tilePosDown:",ce,"screenPos:",w,"screenPosLast:",q),fe(W[0],W[1]),Y()}function Z(n){!b||(console.log("TileView: onmouseup: event:",n,"target:",n.target),!V(n))||(b=!1,Y())}function $(n){if(!V(n))return;n.preventDefault(),n.stopPropagation();const W=1+(n.deltaY>0?-P():P());xe(W),Y()}function ee(n){if(n<=0){X!==null&&(clearInterval(X),X=null);return}X=setInterval(he,1e3/S())}pe(()=>{if(console.log("TileView: $effect: ","tileWidth:",e(),"tileHeight:",o(),"tileCount:",t(),"tileTextureWidth:",r(),"tileTextureHeight:",s(),"tileTexture:",h(),"mapWidth:",l(),"mapHeight:",u(),"mapLength:",d(),"mapData:",m()),console.log("TileView: $effect:","canvas2D:",g),g==null){console.log("TileView: $effect: canvas2D is null!");return}if(_=g.getContext("2d"),console.log("TileView: $effect:","ctx2D:",_),_==null){console.log("TileView: $effect: no ctx!");return}if(f=new Pe,console.log("TileView: $effect: canvasTileRenderer:",f),f==null){console.log("TileView: $effect: no canvasTileRenderer!");return}if(console.log("TileView: $effect: initialize:","canvas2D:",g,"ctx2D:",_,"canvasTileRenderer:",f),f.initialize(g,_,m(),l(),u(),e(),o(),h()).then(()=>{if(console.log("TileView: $effect: initialize: then:","canvas2D:",g,"ctx2D:",_,"canvasTileRenderer:",f),g==null){console.log("TileView: $effect: initialize: then: no canvas2D!");return}if(_==null){console.log("TileView: $effect: initialize: then: no ctx2D!");return}if(f==null){console.log("TileView: $effect: initialize: then: no canvasTileRenderer!");return}f.panTo(l()*.5,u()*.5),f.zoomTo(1),L.push(f),f.render()}),console.log("TileView: $effect:","canvasGL:",p),p==null){console.log("TileView: $effect: canvasGL is null!");return}if(E=p.getContext("webgl2"),console.log("TileView: $effect:","ctxGL:",E),E==null){console.log("TileView: $effect: no ctxGL!");return}if(R=new De,console.log("TileView: $effect: glTileRenderer:",R),f==null){console.log("TileView: $effect: no glTileRenderer!");return}return console.log("TileView: $effect: initialize:","canvasGL:",p,"ctxGL:",E,"glTileRenderer:",R),R.initialize(p,E,m(),l(),u(),e(),o(),h()).then(()=>{if(console.log("TileView: $effect: initialize: then:","canvasGL:",p,"ctxGL:",E,"glTileRenderer:",R),p==null){console.log("TileView: $effect: initialize: then: no canvasGL!");return}if(E==null){console.log("TileView: $effect: initialize: then: no ctxGL!");return}if(R==null){console.log("TileView: $effect: initialize: then: no glTileRenderer!");return}R.panTo(l()*.5,u()*.5),R.zoomTo(1),L.push(R),R.render()}),ee(S()),()=>{console.log("TileView: $effect: clean up"),ee(0)}});var te=O(x,!0,ze),v=oe(te);ie(v,n=>g=n,g);var Te=I(I(v,!0)),D=I(I(Te,!0));ie(D,n=>p=n,p);var C,F,M,y;_e(()=>{C!==(C=z())&&G(v,"width",C),F!==(F=A())&&G(v,"height",F),M!==(M=z())&&G(D,"width",M),y!==(y=A())&&G(D,"height",y)}),v.__mousedown=Q,v.__mousemove=J,v.__mouseup=Z,ne("wheel",v,$,!1,!0),D.__mousedown=Q,D.__mousemove=J,D.__mouseup=Z,ne("wheel",D,$,!1,!0),N(x,te),re()}ge(["mousedown","mousemove","mouseup"]);var Le=k('<meta name="description" content="Micropolis Home">'),Ie=k('<section class="svelte-5p4ri1"><h1 class="svelte-5p4ri1">Canvas and WebGL Tile View Test:</h1> <!></section>');function Be(x,i){se(i,!1),Re();var e=O(x,!0,Ie);Ee(r=>{var s=O(r,!0,Le);we.title="Micropolis Home",N(r,s)});var o=oe(e),t=I(I(o,!0));Ae(t,{mapWidth:16,mapHeight:16}),N(x,e),re()}export{Be as component,be as universal};
