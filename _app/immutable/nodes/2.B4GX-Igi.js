var U=Object.defineProperty;var b=(c,r,e)=>r in c?U(c,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[r]=e;var a=(c,r,e)=>(b(c,typeof r!="symbol"?r+"":r,e),e);import{i as D,h as L,j as p,f as _,g as R,$ as M,b as S,m as v,e as f,a as W}from"../chunks/disclose-version.DMY_hBnz.js";import{p as B,a as X,g as x,s as w}from"../chunks/runtime.CdZnOCbx.js";import{o as F}from"../chunks/main-client.sAjnxwfy.js";const H=!0,j=Object.freeze(Object.defineProperty({__proto__:null,prerender:H},Symbol.toStringTag,{value:"Module"})),C=""+new URL("../assets/tiles.CXP0i5T3.png",import.meta.url).href;class A{constructor(){a(this,"context");a(this,"mapData");a(this,"mapWidth",0);a(this,"mapHeight",0);a(this,"tileWidth",0);a(this,"tileHeight",0);a(this,"panX",0);a(this,"panY",0);a(this,"viewWidth",0);a(this,"viewHeight",0);a(this,"zoom",1);this.context=void 0,this.mapData=[],this.mapWidth=0,this.mapHeight=0,this.tileWidth=0,this.tileHeight=0,this.viewWidth=0,this.viewHeight=0}initialize(r,e,o,t,n,i,s){return this.context=r,this.mapData=e,this.mapWidth=o,this.mapHeight=t,this.tileWidth=n,this.tileHeight=i,Promise.resolve()}handleDrag(r,e){this.panX+=r,this.panY+=e}handleZoom(r,e,o){this.zoom*=r,this.panX=(this.panX-e)*r+e,this.panY=(this.panY-o)*r+o}updateScreenSize(r,e){this.viewWidth=r,this.viewHeight=e}}class G extends A{constructor(){super();a(this,"tileImage",null)}initialize(e,o,t,n,i,s,h){return super.initialize(e,o,t,n,i,s,h).then(()=>(this.context=e,this.tileImage=new Image,this.tileImage.src=h,new Promise((u,T)=>{if(!this.context||!this.tileImage)throw new Error("Canvas context or tile image is not properly initialized.");this.tileImage.onload=()=>u(),this.tileImage.onerror=()=>T(new Error(`Failed to load image at ${h}`))})))}render(){if(!this.context||!this.tileImage)throw new Error("Canvas context or tile image is not properly initialized.");this.context.clearRect(0,0,this.context.canvas.width,this.context.canvas.height);const e=Math.max(0,Math.floor(this.panX/this.zoom)),o=Math.max(0,Math.floor(this.panY/this.zoom)),t=Math.min(this.mapWidth,Math.ceil((this.panX+this.viewWidth/this.zoom)/this.tileWidth)),n=Math.min(this.mapHeight,Math.ceil((this.panY+this.viewHeight/this.zoom)/this.tileHeight));for(let i=o;i<n;i++)for(let s=e;s<t;s++){const h=this.mapData[i*this.mapWidth+s],u=(s*this.tileWidth-this.panX)*this.zoom,T=(i*this.tileHeight-this.panY)*this.zoom,m=h%(this.tileImage.width/this.tileWidth)*this.tileWidth,g=Math.floor(h/(this.tileImage.width/this.tileWidth))*this.tileHeight;this.context.drawImage(this.tileImage,m,g,this.tileWidth,this.tileHeight,u,T,this.tileWidth*this.zoom,this.tileHeight*this.zoom)}}}class y extends A{constructor(){super();a(this,"tilesTexture",null);a(this,"mapTexture",null);a(this,"tilesWidth",0);a(this,"tilesHeight",0);a(this,"tileProgramInfo",null);a(this,"tileBufferInfo",null);a(this,"screenTileArray",new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]))}initialize(e,o,t,n,i,s,h){return super.initialize(e,o,t,n,i,s,h).then(()=>(this.context=e,this.context.viewport(0,0,this.context.drawingBufferWidth,this.context.drawingBufferHeight),this.tileProgramInfo=this.createShaderProgram(),this.tileBufferInfo=this.createBuffers(),this.mapTexture=this.createMapTexture(o,t,n),this.loadTexture(h))).then(()=>{}).catch(u=>{throw u})}createMapTexture(e,o,t){if(!this.context)return console.error("GL context is not initialized."),null;const n=this.context.createTexture();this.context.bindTexture(this.context.TEXTURE_2D,n);const i=new Uint32Array(e);return this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA32UI,o,t,0,this.context.RGBA_INTEGER,this.context.UNSIGNED_INT,i),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.NEAREST),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MAG_FILTER,this.context.NEAREST),n}loadTexture(e){return new Promise((o,t)=>{if(!this.context){t(new Error("GL context is not initialized."));return}const n=this.context.createTexture();this.context.bindTexture(this.context.TEXTURE_2D,n),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA,1,1,0,this.context.RGBA,this.context.UNSIGNED_BYTE,new Uint8Array([0,0,0,255]));const i=new Image;i.onload=()=>{if(!this.context){t(new Error("GL context is not initialized."));return}this.tilesWidth=i.width,this.tilesHeight=i.height,this.context.bindTexture(this.context.TEXTURE_2D,n),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGBA,this.context.RGBA,this.context.UNSIGNED_BYTE,i),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.LINEAR),o()},i.onerror=()=>{t(new Error(`Failed to load texture at ${e}`))},i.src=e})}createShaderProgram(){if(!this.context)throw new Error("The WebGL context is not initialized.");const t=this.compileShaders(`
            #version 300 es
            precision mediump float;
            attribute vec3 a_position;
            attribute vec2 a_screenTile;
            varying vec2 v_screenTile;

            void main() {

                gl_Position = vec4(a_position, 1.0);
                v_screenTile = a_screenTile;

            }
        `,`
            #version 300 es
            precision mediump float;
            uniform vec2 u_tileSize;
            uniform vec2 u_tilesSize;
            uniform sampler2D u_tiles;
            uniform vec2 u_mapSize;
            uniform usampler2D u_map;
            varying vec2 v_screenTile;

            void main() {

                // Calculate the screen tile coordinate.
                vec2 screenTileColRow = floor(v_screenTile);
                vec2 screenTilePosition = v_screenTile - screenTileColRow;

                vec2 cellColRow = mod(screenTileColRow, mapSize);
                vec2 cellUV = cellColRow / u_mapSize;

                // Extract data from the 32-bit unsigned integer texture
                uvec4 cellData = texture(u_map, cellUV);
                uint cellValue = cellData.r & 0xFFFFu; // Use lower 16 bits of the red channel
                float cell = float(cellValue);

                // Calculate the tile row and column from the cell value.
                float tileRow = floor(cell * u_tileSize.x / u_tilesSize.x);
                float tileCol = cell - (tileRow * u_tileSize.y / u_tilesSize.y);

                // Calculate which pixel of the tile to sample.
                vec2 tileCorner = vec2(tileCol, tileRow) * u_tileSize;
                vec2 tilePixel = tileCorner + (screenTilePosition * u_tileSize);
                vec2 uv = tilePixel / u_tilesSize;

                // Sample the tile.
                gl_FragColor = texture2D(u_tiles, uv);

            }
        `);if(!t)throw new Error("Unable to create shader program");const n={position:this.context.getAttribLocation(t,"a_position"),screenTile:this.context.getAttribLocation(t,"a_screenTile")},i={tileSize:this.context.getUniformLocation(t,"u_tileSize"),tilesSize:this.context.getUniformLocation(t,"u_tilesSize"),tiles:this.context.getUniformLocation(t,"u_tiles"),mapSize:this.context.getUniformLocation(t,"u_mapSize"),map:this.context.getUniformLocation(t,"u_map")};for(const[s,h]of Object.entries(n))if(h===-1)throw new Error(`Shader attribute location not found: ${s}`);for(const[s,h]of Object.entries(i))if(h===null)throw new Error(`Shader uniform location not found: ${s}`);return{program:t,attributeLocations:n,uniformLocations:i}}compileShaders(e,o){if(!this.context)throw new Error("The WebGL context is not initialized.");const t=this.loadShader(this.context.VERTEX_SHADER,e),n=this.loadShader(this.context.FRAGMENT_SHADER,o),i=this.context.createProgram();if(!i)throw new Error("Unable to create shader program");if(this.context.attachShader(i,t),this.context.attachShader(i,n),this.context.linkProgram(i),!this.context.getProgramParameter(i,this.context.LINK_STATUS)){const s=this.context.getProgramInfoLog(i);throw this.context.deleteProgram(i),new Error("Failed to link shader program: "+s)}return i}loadShader(e,o){if(!this.context)throw new Error("The WebGL context is not initialized.");const t=this.context.createShader(e);if(!t)throw new Error("Unable to create shader");if(this.context.shaderSource(t,o),this.context.compileShader(t),!this.context.getShaderParameter(t,this.context.COMPILE_STATUS)){const n=this.context.getShaderInfoLog(t);throw this.context.deleteShader(t),new Error("An error occurred compiling the shaders: "+n)}return t}createBuffers(){if(!this.context)throw new Error("The WebGL context is not initialized.");const e=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,e);const o=[-1,-1,0,1,-1,0,-1,1,0,-1,1,0,1,-1,0,1,1,0];this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(o),this.context.STATIC_DRAW);const t=this.context.createBuffer();this.updateScreenTileArray();const n=this.context.createBuffer();this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,n);const i=[0,1,2,2,1,3];return this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),this.context.STATIC_DRAW),{position:e,screenTile:t,indices:n}}updateScreenTileArray(){if(!this.context||!this.tileBufferInfo)throw new Error("The WebGL context is not initialized.");const e=(this.panX-this.viewWidth/2/this.zoom)/this.mapWidth,o=(this.panX+this.viewWidth/2/this.zoom)/this.mapWidth,t=(this.panY-this.viewHeight/2/this.zoom)/this.mapHeight,n=(this.panY+this.viewHeight/2/this.zoom)/this.mapHeight;this.screenTileArray.set([e,t,o,t,e,n,e,n,o,t,o,n]),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.tileBufferInfo.screenTile),this.context.bufferData(this.context.ARRAY_BUFFER,this.screenTileArray,this.context.DYNAMIC_DRAW)}render(){if(!this.context||!this.tileProgramInfo||!this.tileBufferInfo||!this.tilesTexture)throw new Error("The WebGL context, shaders, or textures are not properly initialized.");this.context.clearColor(0,0,0,1),this.context.clearDepth(1),this.context.enable(this.context.DEPTH_TEST),this.context.depthFunc(this.context.LEQUAL),this.context.clear(this.context.COLOR_BUFFER_BIT|this.context.DEPTH_BUFFER_BIT),this.context.useProgram(this.tileProgramInfo.program),this.context.uniform2f(this.tileProgramInfo.uniformLocations.tileSize,this.tileWidth,this.tileHeight),this.context.uniform2f(this.tileProgramInfo.uniformLocations.tilesSize,this.tilesWidth,this.tilesHeight),this.context.activeTexture(this.context.TEXTURE0),this.context.bindTexture(this.context.TEXTURE_2D,this.tilesTexture),this.context.uniform1i(this.tileProgramInfo.uniformLocations.tiles,0),this.context.activeTexture(this.context.TEXTURE1),this.context.bindTexture(this.context.TEXTURE_2D,this.mapTexture),this.context.uniform1i(this.tileProgramInfo.uniformLocations.map,1),this.context.uniform2f(this.tileProgramInfo.uniformLocations.mapSize,this.mapWidth,this.mapHeight),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.tileBufferInfo.position),this.context.vertexAttribPointer(this.tileProgramInfo.attributeLocations.position,3,this.context.FLOAT,!1,0,0),this.context.enableVertexAttribArray(this.tileProgramInfo.attributeLocations.position),this.updateScreenTileArray(),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.tileBufferInfo.screenTile),this.context.vertexAttribPointer(this.tileProgramInfo.attributeLocations.screenTile,2,this.context.FLOAT,!1,0,0),this.context.enableVertexAttribArray(this.tileProgramInfo.attributeLocations.screenTile),this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.tileBufferInfo.indices),this.context.viewport(0,0,this.context.canvas.width,this.context.canvas.height),this.context.drawElements(this.context.TRIANGLES,6,this.context.UNSIGNED_SHORT,0)}}var Y=S('<meta name="description" content="Micropolis Home">'),N=S('<section class="svelte-n3hpwt"><h3>CanvasTileRenderer:</h3> <canvas width="512" height="512"></canvas> <h3>GLTileRenderer:</h3> <canvas width="512" height="512"></canvas></section>');function K(c,r){X(r,!1);let e=v(null),o=v(null),t=null,n=null;const i=256,s=256,h=16,u=16,T=C,m=Array.from({length:i*s},()=>Math.floor(Math.random()*256));F(()=>{if(console.log("TileEngine Test: onMount:","canvasTileRenderer_canvas:",x(e)),x(e)==null){console.log("TileEngine Test: onMount: canvasTileRenderer_canvas is null!");return}if(x(o)==null){console.log("TileEngine Test: onMount: glTileRenderer_canvas is null!");return}const l=x(e).getContext("2d");if(console.log("TileEngine Test: onMount:","canvasTileRenderer_context:",l),l==null){console.log("TileEngine Test: onMount: no canvasTileRenderer_context!");return}if(t=new G,console.log("TileEngine Test: onMount: canvasTileRenderer:",t),t==null){console.log("TileEngine Test: onMount: no canvasTileRenderer!");return}console.log("TileEngine Test: onMount: initialize:","canvasTileRenderer_context:",l,"mapData:",m,"mapWidth:",i,"mapHeight:",s,"tileWidth:",h,"tileWidth:",u,"tileTexture:",T),t.initialize(l,m,i,s,h,u,T).then(()=>{if(console.log("TileEngine Test: onMount: initialize: then:","canvasTileRenderer_context:",l,"canvasTileRenderer:",t),t==null){console.log("TileEngine Test: onMount: initialize: then: no canvasTileRenderer!");return}if(x(e)==null){console.log("TileEngine Test: onMount: initialize: then: no glTileRenderer_canvas!");return}t.updateScreenSize(x(e).width,x(e).height),t.render()});const d=x(o).getContext("webgl2");if(console.log("TileEngine Test: onMount:","glTileRenderer_context:",d),d==null){console.log("TileEngine Test: onMount: no glTileRenderer_context!");return}if(n=new y,console.log("TileEngine Test: onMount: glTileRenderer:",n),t==null){console.log("TileEngine Test: onMount: no glTileRenderer!");return}console.log("TileEngine Test: onMount: initialize:","glTileRenderer_context:",d,"mapData:",m,"mapWidth:",i,"mapHeight:",s,"tileWidth:",h,"tileWidth:",u,"tileTexture:",T),n.initialize(d,m,i,s,h,u,T).then(()=>{if(console.log("TileEngine Test: onMount: initialize: then:","glTileRenderer_context:",d,"glTileRenderer:",n),n==null){console.log("TileEngine Test: onMount: initialize: then: no glTileRenderer!");return}if(x(o)==null){console.log("TileEngine Test: onMount: initialize: then: no glTileRenderer_canvas!");return}n.updateScreenSize(x(o).width,x(o).height),n.render()})}),D();var g=R(c,!0,N);L(l=>{var d=R(l,!0,Y);M.title="Micropolis Home",_(l,d)});var z=W(g),E=f(f(z,!0));p(E,l=>w(e,l),e);var I=f(f(E,!0)),P=f(f(I,!0));p(P,l=>w(o,l),o),_(c,g),B()}export{K as component,j as universal};
